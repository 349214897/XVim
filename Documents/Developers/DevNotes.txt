
### Any tips or infomation ###

# Problem when yank and put block text #
   When yank and put with block selection it makes inserting some spaces to pad a line.
For example, assume we have following text,
-----------------------
aaaaaaa

bbbbbbb
-----------------------
there is a blank line between two "a" and "b" lines and block selection from first "a" to first "b"
makes ["a", "", "b"] as a selection. When yank this and put at 3rd "a" will results in padding 3 spaces
in 2nd line to put ""(empty string). 
The problem is that when Xcode's preference "Automatically trim trailing whitespaces" will delete the 
spaces after putting the yanked text.
It looks that it does not big problem but when you want to "undo" the put operation you have to type 
"u" twice because the actions taken when we put are "Insert ["a", "", "b"] into each line" and "trim 
trailing whitespace" and first "u" command only undo the "trim..." action.
I tried to group them up into one action to undo with one "u" commnad but could not.


### How to control documents (Open, Close) ###
You can use IDEDocumentController. Its like...
   IDEDocumentController* ctrl = [IDEDocumentController sharedDocumentController];
   NSError* error;
   NSURL* doc = [NSURL fileURLWithPath:@"/foo/bar/test.h"];
   [ctrl openDocumentWithContentsOfURL:doc display:YES error:&error];


### Debugger area / Console Area ###
To access console area (debugger area) you can use 
    IDEDefaultDebugArea* debuggerArea = [(IDEDefaultDebugArea*)[XVimLastActiveEditorArea() activeDebuggerArea];
IDEDefaultDebuggerArea is a NSViewContoroller and has "varibles view" and  "console view" as you can see in bottom of Xcode window.

To access "condole view" you can use
    IDEConsoleArea *console = [debuggerArea consoleArea];
This is also NSViewController.
If you want to access its view you have to get the view but it does provides public property to access it.
So we have to specify the instance varible name to get the view as below.
    IDEConsoleTextView* pView;
    object_getInstanceVariable(console , "_consoleView" , (void**)&pView);
Now "pView" is IDEConsoleTextView (subclass of NSView)

To insert text into the console view you can do like
    pView.logMode = 1;
    [pView insertText:@"some text"]
I do not know what is logMode but you have to specify it to insert text (otherwise you can not insert text).

IDEConsoleArea has filterMode property. This property indicates the filter you can specify in console area.
You can see "All Output","Deubbger Output","Target Output" pulldown selection button on top of the console area.
The values corresponds like
  0 - All Output
  1 - Debugger Output
  2 - Target Output



### DVTSourceTextview / DVTFoldingTextStorage / DVTTextStorage
DVTSourceText view is a subclass of NSTextView.
NSTextView has NSTextStorage to hold its content and DVTFoldingTextStorage is the claas corresponds it in Xcode.

DVTFoldingTextStorage is handling string in a DVTSourceTextView with folding state.
For example, we often have a placeholder in the text view (the highlighted words when you type some method)
Internally it is just a text like "< # placholder #>" and it is showl as just "placeholder" with blue highlighted.
(I put space between < and # above because Xcode automatically holds it if it is not there)
In this case ,DVTFoldingTextStorage will give a string "placeholder" to its text view.
And DVTFoldingTextStorage has a property "realTextStorage"(DVTTextStorage) which holds internal text notation including < # part.
So the length of the text is different between internal text notation and text acutually shown in the view.
We have to handle these correctly when we calc the position in a text. We usually can use just a
DVTFoldingTextStorage's methods but sometimes we need to know acutal length in internal text.



### Exception occurs when you edit DVTFoldingTextStorage when the view is showing complition list
When I tried to implement "hlsearch" I had to update text view (text storage) whenever they type (insert/delete) text because they puroduce
some text which match/unmatch the currently search string.
Highlighting a text is done via editing text storage object in a text view (DVTFoldingTextStorage in this case).
So I update the storage whenever the type. But it causes exceptions in DVTFoldinTextStorage.
If I tried to edit the storage while the view is showing autocompletion it causes exception and break the completion feature.
Currently I use NSTextViewDidChangeNotification to know when to update highlight state.